// ###Reset

// Mixin Reset
@mixin reset(){

  // Reset all browser styles & set font-size to 100%
  html, body, div, span, applet, object, iframe,
  h1, h2, h3, h4, h5, h6, p, blockquote, pre,
  a, abbr, acronym, address, big, cite, code,
  del, dfn, em, img, ins, kbd, q, s, samp,
  small, strike, strong, sub, sup, tt, var,
  b, u, i, center,
  dl, dt, dd, ol, ul, li,
  fieldset, form, label, legend,
  table, caption, tbody, tfoot, thead, tr, th, td,
  article, aside, canvas, details, embed,
  figure, figcaption, footer, header, hgroup,
  menu, nav, output, ruby, section, summary,
  time, mark, audio, video {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
  }

  // Set HTML5 elements to block
  article, aside, details, figcaption, figure,
  footer, header, hgroup, menu, nav, section {
    display: block;
  }

  // Remove built in list styling
  ol, ul {
    list-style: none;
  }

  // Normalize block quotes
  blockquote, q {
    quotes: none;
  }

  // Remove pseudo elements
  blockquote:before, blockquote:after,
  q:before, q:after {
    content: '';
    content: none;
  }

  // Normalize tables
  table {
    border-collapse: collapse;
    border-spacing: 0;
  }

  // Global border-box
  * {
    @include box-sizing(border-box);
  }

}
// ###Settings

// Set base font size
$rem-base: 16px !default;
// Set line height ratio base
$line-height-base: 26px !default;
// Vertical rhythm ratio
$type-rhythm-ratio: 1.14 !default;
// Desktop Media Query
$desktop: "(min-width: 1024px)" !default;
// Tablet Media Query
$tablet: "(min-width: 768px) and (max-width: 1023px)" !default;
// Mobile Media Query
$mobile: "(max-width: 767px)" !default;
// Set Grid Column Count
$grid-columns: 12 !default;
// Set Grid Gutter (percentage)
$grid-gutter: 4 !default;
// Set Grid Padding (as px)
$grid-padding: 20px !default;
// Set Grid Max Width (as px)
$grid-max-width: 1024px !default;
// ###Functions

// Strips unit suffix from value
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// Converts to rem, utility for rem-calc
@function convert-to-rem($value, $base-value: $rem-base)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if (strip-unit($value) == 0) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

// Calculates rem value from number
@function rem-calc($values, $base-value: $rem-base) {
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}

// Gets grid column width
@function span($cols: 4) {
  @return percentage($cols/$grid-columns);
}

// Gets grid gutter
@function gutter(){
  @return $grid-gutter;
}
// ###Mixins

// Sets container styles
@mixin container {
  width: 100%;
  max-width: $grid-max-width;
  @include clear;
}

// Sets grid column width
@mixin span($cols: 4, $padding: true) {
  $column-width: $cols / $grid-columns;
  @if $padding != false {
  padding-left: $grid-padding;
  padding-right: $grid-padding;
  }
  width: percentage($column-width);
  float: left;
}

// Sets grid column width (with gutter)
@mixin col($cols: 4, $gutter: false) {
  $column-width: $cols / $grid-columns;
  @if $gutter != false {
    $single-col: (100% - ($grid-gutter * ($grid-columns - 1))) / $grid-columns;
    width: ($single-col * $cols) + ($grid-gutter * ($cols - 1));
    margin-left: percentage($grid-gutter / 100);
    &:first-child {
      margin-left: 0;
    }
    &:last-child {
      float: right;
    }
  }@else {
    width: percentage($column-width);
  }
  float: left;
}

// Sets grid offet margin
@mixin offset($cols: 4) {
  margin-left: percentage($cols/$grid-columns)
}

// Wraps interior content in a media query
@mixin breakpoint($querystring) {
  @media #{$querystring} {
    @content;
  }
}

// Renders fully prefixed transistion
@mixin transition ($property: 0.15s) {
    @include prefixer(transition, $property, webkit moz ms);
}

// Renders fully prefixed transform
@mixin transform($property: none) {
  @include prefixer(transform, $property, webkit moz ms);
}

// Renders fully prefixed box-sizing
@mixin box-sizing ($box) {
  @include prefixer(box-sizing, $box, webkit moz);
}

// Utility for prefixing mixins
@mixin prefixer($property, $value, $prefixes: webkit moz) {
  @each $prefix in $prefixes {
    #{"-" + $prefix + "-" + $property}: $value;
  }
  #{$property}: $value;
}

// Sets ellipsis overflow
@mixin ellipsis($width: 100%) {
  display: inline-block;
  max-width: $width;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Clearfix include
@mixin clear() {
  &:after {
  content:"";
  display:table;
  clear:both;
  }
}

// Placeholder for clear
%clear {
  &:after {
  content:"";
  display:table;
  clear:both;
  }
}

// Text hider

@mixin hide-text() {
  overflow:hidden;
  text-indent: 100%;
  white-space: nowrap;
}

// Placeholder for hide-text
%hide-text {
  overflow:hidden;
  text-indent: 100%;
  white-space: nowrap;
}

// Inline List

@mixin inline-list($float: true) {
    list-style-type:none;
    padding:0;
    margin:0;
    overflow:hidden;
    > li{
        @if $float == true {
        display:block;
        float:left;
      } @else {
        display: inline-block;
      }
    }
}
// ###Typography

// Scale type at $type-rhythm-ratio
$h6-size: round(strip-unit($rem-base) * $type-rhythm-ratio);
$h5-size: round($h6-size * $type-rhythm-ratio);
$h4-size: round($h5-size * $type-rhythm-ratio);
$h3-size: round($h4-size * $type-rhythm-ratio);
$h2-size: round($h3-size * $type-rhythm-ratio);
$h1-size: round($h2-size * $type-rhythm-ratio);

// Typographic Rhythm Mixin
@mixin type($rem-base: $rem-base,$line-height-base: $line-height-base, $type-rhythm-ratio: $type-rhythm-ratio){

  @if unit($line-height-base) == "px" {
    // Set line-height
    body {
      line-height: strip-unit($line-height-base) / strip-unit($rem-base);
    }
  } @else {
    body {
      line-height: $line-height-base;
    }
  }

  // Set heading sizes to size variables
  h1 {
    font-size: rem-calc($h1-size);
  }

  h2 {
    font-size: rem-calc($h2-size);
  }

  h3 {
    font-size: rem-calc($h3-size);
  }

  h4 {
    font-size: rem-calc($h4-size);
  }

  h5 {
    font-size: rem-calc($h5-size);
  }

  h6 {
    font-size: rem-calc($h6-size);
  }

  p {
    font-size: $rem-base;
  }

}